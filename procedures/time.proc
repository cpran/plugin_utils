# This script is part of the utils CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/utils>
#
# The utils plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The utils plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with utils. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014-2016 Jose Joaquin Atria

include ../../plugin_utils/procedures/utils.proc

#! ~~~ params
#! out:
#!   .dw:    Day of the week (1-7)
#!   .dw$:   Day of the week as string ("Monday", ...)
#!   .dm:    Day of the month (1-31)
#!   .mo:    Month (1-12)
#!   .mo$:   Month as string ("January", ...)
#!   .yr:    Year (Gregorian)
#!   .tm$:   Time as string ("00:00:00")
#!   .hr:    Hours (0-23)
#!   .mn:    Minutes (0-59)
#!   .sc:    Seconds (0-59)
#!   .date$: The full standard Praat date
#! seealso:
#!   - utils@parseTime
#! ~~~
#!
#! ~~~ praat synopsis
#! @time()
#! @parseTime: date$()
#! assert time.hr == parseTime.hr
#! ~~~
#!
#! Similar to calling the standard Praat `date()` format, but it is returned
#! instead as a list of component parts, suitable to be used for custom date
#! formatting.
#!
#! The parsing is done by calling `@parseTime`.
#!
procedure time ()
  .date$ = date$()
  @parseTime(.date$)
  .dw  = parseTime.dw
  .dw$ = parseTime.dw$
  .dm  = parseTime.dm
  .mo  = parseTime.mo
  .mo$ = parseTime.mo$
  .yr  = parseTime.yr
  .tm$ = parseTime.tm$
  .hr  = parseTime.hr
  .mn  = parseTime.mn
  .sc  = parseTime.sc
endproc

#! ~~~ params
#! in:
#!   .date$: >
#!     A date string to parse, as returned by the standard `date()` function
#! out:
#!   .dw:    Day of the week (1-7)
#!   .dw$:   Day of the week as string ("Monday", ...)
#!   .dm:    Day of the month (1-31)
#!   .mo:    Month (1-12)
#!   .mo$:   Month as string ("January", ...)
#!   .yr:    Year (Gregorian)
#!   .tm$:   Time as string ("00:00:00")
#!   .hr:    Hours (0-23)
#!   .mn:    Minutes (0-59)
#!   .sc:    Seconds (0-59)
#!   .date$: The full standard Praat date
#! ~~~
#!
#! ~~~ praat synopsis
#! @time()
#! @parseTime: date$()
#! assert time.hr == parseTime.hr
#! ~~~
#!
#! Given a date string (such as that returned by the standard `date()` Praat
#! function, it is parsed into a series of independent components, suitable
#! for custom formatting.
#!
procedure parseTime (.date$)
  # Fri Jul 18 18:41:33 2014
  .date$ = replace_regex$(date$, "  +",  " ", 0)
  @split(" ", .date$)
  if split.length != 5
    exitScript: "Unexpected output from date$()!"
  endif
  for .i to split.length
    .date$[.i] = split.return$[.i]
  endfor

  .days$   = "Monday Tuesday Wednesday Thursday Friday Saturday Sunday"
  @split(" ", .days$)
  .days = split.length
  for .i to .days
    .days$[.i] = split.return$[.i]
  endfor

  .months$ = "January February March April May June
    ... July August September October November December"
  @split(" ", .months$)
  .months = split.length
  for .i to .months
    .months$[.i] = split.return$[.i]
  endfor

  .dw$ = .date$[1]        ; "Fri"
  .dw = 0
  for .i to .days
    if index_regex(.days$[.i], "^" + .dw$)
      .dw = .i
      .dw$ = .days$[.i]   ; "Friday"
      .i += .days
    endif
  endfor

  .mo$ = .date$[2]        ; "Jul"
  .mo = 0
  for .i to .months
    if index_regex(.months$[.i], "^" + .mo$)
      .mo = .i
      .mo$ = .months$[.i] ; "July"
      .i += .months
    endif
  endfor

  .dm  = number(.date$[3]); 18
  .tm$ =        .date$[4] ; "18:41:33"
  .yr  = number(.date$[5]); 2014

  @split(":", .tm$)
  if split.length != 3
    exitScript: "Unexpected time format from date$()!"
  endif

  .hr = number(split.return$[1]) ; 18
  .mn = number(split.return$[2]) ; 41
  .sc = number(split.return$[3]) ; 33
endproc

# Not working, and not sure if this needs to be here at all.
procedure str2time (.date$)
  @parseTime(.date$)
  .time  = time.sc
  .time += time.mn * 60
  .time += time.hr * 3600

  @_IsLeapYear(parseTime.yr)
  .days_per_month$ = if '_IsLeapYear.return'
    ... then "31 59 90 120 151 181 212 243 273 304 334 365"
    ... else "31 60 91 121 152 182 213 244 274 305 335 366" fi
  @split(" ", .days_per_month$)

  if (parseTime.yr >= 1 and parseTime.yr <= 9999) and
    ... (parseTime.mo >= 1 and parseTime.mo <= 12)
    .previous_year = parseTime.yr - 1
    .previous_days = ((.previous_year * 365) + (.previous_year / 4)) -
      ... ((.previous_year / 100) + (.previous_year / 400))
    .total_days = ((.previous_days + number(split.return$[parseTime.mo-1])) +
      ... parseTime.dm) - 1
  endif
  .return = .total_days
endproc

procedure _IsLeapYear (.year)
  if .year < 1 or .year > 9999
    existScript: "Year out of bounds: ", .year
  endif
  .return = 1
  .return = if .year mod  4 != 0 then 0 else .return fi
  .return = if .year mod 100 = 0 then .year mod 400 = 0 else .return fi
endproc
