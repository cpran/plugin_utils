# This script is part of the utils CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/utils>
#
# The utils plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The utils plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with utils. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014-2016 José Joaquín Atria

include ../../plugin_utils/procedures/utils.proc

call require 5.3.46

#! ~~~ params
#! in:
#!   .version$: A version string or plugin name to require
#! seealso:
#!   - utils@semver_compare
#! ~~~
#!
#! Makes sure the current version is at least a certain version. If the current
#! Praat version is lower than the one specified, the procedure will halt the
#! calling script with a useful error message.
#!
#! Praat version strings are parsed by `@semver` and compared with
#! `@semver_compare`.
#!
#! If passed a non-version string, the procedure will interpret it as the name
#! of a plugin, and test the existence of that plugin under the preferences
#! directory.
#!
procedure require .requirement$
  if .requirement$ == ""
    exit Cannot require the empty string'newline$'
  endif

  if index_regex(.requirement$, "[0-9]+(\.[0-9]+){0,2}(-[a-zA-Z0-9-]+)?(\+[a-zA-Z0-9-]+)?")
    call semver_compare "'.requirement$'" 'praatVersion$'
    if semver_compare.return < 0
      exit This script requires Praat v'.requirement$'.
        ... Please update Praat'newline$'
    endif
  else
    if !fileReadable(preferencesDirectory$ + "/plugin_" + .requirement$)
      exit This script requires the '.requirement$' plugin.
        ... Please install and retry'newline$'
    endif
  endif
endproc

#! ~~~ params
#! in:
#!   .a$: A version string to compare
#!   .b$: Another version string to compare
#! seealso:
#!   - utils@semver
#! ~~~
#!
#! Compares two version strings like those used by Praat, with three version
#! numbers separated by periods, or more generally, compatible with the
#! [_semantic versioning_][semver] standard. In this case, to accommodate
#! Praat's version numbers, fewer than three components are acceptable
#! (eg `10.4` is acceptable, and greater than `10.3.192`).
#!
#! The labels are compared last, and a version without labels is greater than
#! one with a label. Version metadata is not taken into consideration.
#!
#! The result of the comparison is stored in `.return`, which will be 0 if the
#! strings are equal, -1 if the first is greater, and 1 if the second is.
#!
procedure semver_compare .a$ .b$
  .components = 3
  if .a$ != .b$
    @semver: .a$
    for .i to semver.components
      .a[.i] = semver.v[.i]
    endfor
    .alabel$ = semver.label$

    @semver: .b$
    for .i to semver.components
      .b[.i] = semver.v[.i]
    endfor
    .blabel$ = semver.label$

    for .i to .components
      if .a[.i] > .b[.i]
        .return = -1
        .i = .components
      elsif .a[.i] < .b[.i]
        .return = 1
        .i = .components
      else
        .return = 0
      endif
    endfor

    if .return == 0
      if    .alabel$ != "" and .blabel$ == "" or .alabel$ < .blabel$
        .return =  1
      elsif .alabel$ == "" and .blabel$ != "" or .alabel$ > .blabel$
        .return = -1
      endif
    endif

  else
    .return = 0
  endif
endproc

#! ~~~ params
#! in:
#!   .v$: A version string
#! out:
#!   .v[]:      The three numeric components
#!   .label$:   The label string
#!   .meta$:    The metadata string
#!   .version$: The composite version string
#! ~~~
#!
#! Parses a version string as a semantic versioning string. These have three
#! integer components separated by periods (eg. 3.2.38). In this case,
#! providing fewer than three is acceptable, in which case missing numbers
#! will be assigned 0 by default.
#!
#! A label can be attached at the end separated from the numeric components
#! with a hyphen. Acceptable characters in the label are those matching
#! [a-zA-Z0-9-] (eg. 8.0.2-Label-with-hyphens)
#!
#! Build metadata can be appended separated from the rest of the components
#! with a plus sign (+). Acceptable metadata characters are those matching
#! [a-zA-Z0-9.-] (eg. 1.2.3+za.sd-65AF4D87B2, 1.3.4-label+metadata)
#!
#! If given a non-parseable string, this procedure will stop execution.
#!
procedure semver .v$
  .components = 3

  split.stop_at = .components
  call split "." '.v$'
  for .i to .components
    .v[.i] = if .i <= split.length then number(split.return$[.i]) else 0 fi
    if .v[.i] == undefined
      exit Not a valid version number: "'.v$'"
    endif
  endfor

  .last$ = split.return$[.components]
  split.stop_at = 2
  call split "+" '.last$'
  .meta$ = if split.length == 2 then split.return$[2] else "" fi
  if index_regex(.meta$, "[^0-9A-Za-z.-]")
    exit Not valid metadata
  endif

  split.stop_at = 2
  .label$ = .last$ - ("+" + .meta$)
  call split "-" '.label$'
  .label$ = if split.length == 2 then split.return$[2] else "" fi
  if index_regex(.label$, "[^0-9A-Za-z-]")
    exit Not a valid label
  endif

  .version$ = string$(.v[1]) + "." + string$(.v[2]) + "." + string$(.v[3]) +
    ... if .label$ != "" then "-" + .label$ else "" fi +
    ... if .meta$  != "" then "+" + .meta$  else "" fi
endproc
