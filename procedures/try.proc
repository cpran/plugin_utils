# This script is part of the utils CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/utils>
#
# The utils plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The utils plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with utils. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014, 2015 Jose Joaquin Atria

include ../../plugin_utils/procedures/utils.proc

#! ~~~ params
#! in:
#!   .src$: The source of a Praat script, as a string
#! out:
#!   .return: True if the executed script exited without errors
#!   .catch: False if the executed script exited without errors
#! selection:
#!   out: Might change depending on contents of executed script
#! ~~~
#!
#! ~~~ praat synopsis
#! @try: "Play"
#! # or
#! call try
#!   ... Copy: extractWord$(selected$(), " ") + "_copy" \n
#!   ... Reverse                                        \n
#!
#! if try.catch
#!   appendInfoLine: "An error was encountered, but we sailed past it"
#! endif
#! ~~~
#!
#! Error handling in Praat is limited, and is mostly restricted exclusively to
#! the use of the `nowarn` and `nocheck` directives, which swallow all warnings
#! and errors respectively. However, these can only be applied under certain
#! circumstances, and can only apply to a specific line.
#!
#! The `@try` procedure takes a single string of code (which could be a single
#! line or a block of code represented by a string containing separating
#! newlines) and executes that in a safe manner, such that even if execution of
#! those lines crashes due to some unexpected reason, the execution of the
#! larger script will not.
#!
#! Any changes in the selection that result from the _successful_ completion of
#! the code passed as the argument to `@try` will be kept. Otherwise, the
#! selection active at the time `@try` was called will be restored.
#!
#! Control variables are also provided to make it easy to check whether any
#! errors were encountered. The `.return` variable will be true if the code
#! executed without errors, and false otherwise. For convenience, a separate
#! variable `.catch` is provided with the opposite meaning: true on error,
#! false on success.
#!
#! Despite the name of the variable, it is not possible at this point to
#! actually _catch_ the error. All this procedure does it to make it possible
#! to `nocheck` larger blocks of code.
#!
#! Since the code that is passed to `@try` is executed by a separate instance
#! of the interpreter, the variables in that code will exist on an entirely
#! separate scope from the rest of the script, and will not be available in the
#! calling script. Likewise, the script that is "tried" will not have access
#! to the variables in the calling script.
#!
#! It is not possible also to pass arguments to the tried code. To bypass this
#! issue, save them in an object (a Strings or a Table object might be
#! suitable) and read them from there.
#!
procedure try .src$
  .return = 0

  # For convenience, replace instances of \n with a newline
  .src$ = replace_regex$(.src$, "\s+\\n\s?", newline$, 0)

  # Save the current selection so it can be restored in case of error
  .n = numberOfSelected()
  for .i to .n
    .id[.i] = selected(.i)
  endfor

  # Code is isolated into a separate file
  @mktempfile: "try_praat_XXXXXX", ".praat"
  .tmp$ = mktempfile.name$
  .rnd$ = mktempfile.random$

  # runScript assigns the ID of the only selected object on success.
  # But for this, one and only one object must be selected.
  # A selection table is used to reduce this selection to a single object.
  writeFileLine:  .tmp$, .src$
  appendFileLine: .tmp$, ""
  appendFileLine: .tmp$, "n = numberOfSelected()"
  appendFileLine: .tmp$, "for i to n"
  appendFileLine: .tmp$, "  id[i] = selected(i)"
  appendFileLine: .tmp$, "endfor"
  appendFileLine: .tmp$, "table = Create Table with column names: """ + .rnd$ + """, 0,"
  appendFileLine: .tmp$, "  ... ""type name n id"""
  appendFileLine: .tmp$, "for i to n"
  appendFileLine: .tmp$, "  selectObject: id[i]"
  appendFileLine: .tmp$, "  type$ = extractWord$(selected$(), """")"
  appendFileLine: .tmp$, "  name$ = extractWord$(selected$(), "" "")"
  appendFileLine: .tmp$, "  selectObject: table"
  appendFileLine: .tmp$, "  Append row"
  appendFileLine: .tmp$, "  Set string value:  i, ""type"", type$"
  appendFileLine: .tmp$, "  Set string value:  i, ""name"", name$"
  appendFileLine: .tmp$, "  Set numeric value: i, ""id"",   id[i]"
  appendFileLine: .tmp$, "  Set numeric value: i, ""n"",    1"
  appendFileLine: .tmp$, "endfor"

  # .script$ = readFile$(.tmp$)
  # appendInfoLine: .script$

  .return = nocheck runScript: .tmp$

  # If the correct selection table is selected, restore its contents
  if numberOfSelected("Table") and selected$("Table") == .rnd$
    .table = selected()
    .n = Get number of rows
    for .i to .n
      nocheck plusObject: object[.table, .i, "id"]
    endfor
    nocheck removeObject: .table
  endif

  .return = if .return == undefined then 0 else .return fi
  .catch = !.return

  # If an error was found in the tried code, restore the original selection
  if .catch
    nocheck selectObject: undefined
    for .i to .n
      nocheck plusObject: .id[.i]
    endfor
  endif

  deleteFile(.tmp$)
endproc
