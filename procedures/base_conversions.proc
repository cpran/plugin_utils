# This script is part of the utils CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/utils>
#
# The utils plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The utils plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with utils. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014-2016 Jose Joaquin Atria

#! ~~~ params
#! in:
#!   .str$: A hexadecimal string representation of a number
#! out:
#!   .n: The decimal representation of that number
#! seealso:
#!   - utils@n2dec
#! ~~~
#!
#! ~~~ praat synopsis
#! @hex2dec: "10"
#! assert hex2dec.n == 16
#! ~~~
#!
#! Parse a string as a hexadecimal number. The result is stored in `.n`.
#!
procedure hex2dec: .str$
  # Normalize hexadecimal string: no leading hash, lowercase.
  .hex$ = replace$ (.str$, "#", "", 0)

  @n2dec(.hex$, 16)
  .n = n2dec.n
endproc

#! ~~~ params
#! in:
#!   .str$: An octal string representation of a number
#! out:
#!   .n: The decimal representation of that number
#! seealso:
#!   - utils@n2dec
#! ~~~
#!
#! ~~~ praat synopsis
#! @oct2dec: "10"
#! assert oct2dec.n == 8
#! ~~~
#!
#! Parse a string as an octal number. The result is stored in `.n`.
#!
procedure oct2dec: .str$
  @n2dec(.str$, 8)
  .n = n2dec.n
endproc

#! ~~~ params
#! in:
#!   .str$: A binary string representation of a number
#! out:
#!   .n: The decimal representation of that number
#! seealso:
#!   - utils@n2dec
#! ~~~
#!
#! ~~~ praat synopsis
#! @bin2dec: "10"
#! assert bin2dec.n == 2
#! ~~~
#!
#! Parse a string as a binary number. The result is stored in `.n`.
#!
procedure bin2dec: .str$
  @n2dec(.str$, 2)
  .n = n2dec.n
endproc

#! ~~~ params
#! in:
#!   .num: A number to convert to hexadecimal notation
#! out:
#!   .n$: The hexadecimal representation of that number, as a string
#! seealso:
#!   - utils@dec2n
#! ~~~
#!
#! ~~~ praat synopsis
#! @dec2hex: 16
#! assert dec2hex.n$ == "10"
#! ~~~
#!
#! Parse a number and return its hexadecimal string representation. The result
#! is stored in `.n$`.
#!
procedure dec2hex: .num
  @dec2n(.num, 16)
  .n$ = dec2n.n$
endproc

#! ~~~ params
#! in:
#!   .num: A number to convert to octal notation
#! out:
#!   .n$: The octal representation of that number, as a string
#! seealso:
#!   - utils@dec2n
#! ~~~
#!
#! ~~~ praat synopsis
#! @dec2hex: 8
#! assert dec2hex.n$ == "10"
#! ~~~
#!
#! Parse a number and return its octal string representation. The result
#! is stored in `.n$`.
#!
procedure dec2oct: .int
  @dec2n(.int, 8)
  .n$ = dec2n.n$
endproc

#! ~~~ params
#! in:
#!   .num: A number to convert to binary notation
#! out:
#!   .n$: The binary representation of that number, as a string
#! seealso:
#!   - utils@dec2n
#! ~~~
#!
#! ~~~ praat synopsis
#! @dec2bin: 2
#! assert dec2bin.n$ == "10"
#! ~~~
#!
#! Parse a number and return its binary string representation. The result
#! is stored in `.n$`.
#!
procedure dec2bin: .int
  @dec2n(.int, 2)
  .n$ = dec2n.n$
endproc

#! ~~~ params
#! in:
#!   .num$: A string to parse as a base-n number
#!   .base: The base of the number represented in that string
#! out:
#!   .n: The decimal representation of that number
#! seealso:
#!   - utils@dec2n
#! ~~~
#!
#! ~~~ praat synopsis
#! @m2dec: "10", 12
#! assert n2dec.n == 12
#! ~~~
#!
#! Parse a string as a base-n number. The result is stored in `.n`.
#!
procedure n2dec: .str$, .base
  .digits$ = left$("0123456789abcdefghijklmnopqrstuvwxyz", .base)
  .str$ = replace_regex$(.str$, "(.)", "\L\1", 0)

  if index_regex (.str$, "[^-" + .digits$ + ".]")
      .n = undefined
      appendInfoLine: "Not a valid base-", .base, " number: ", .str$
  else
    if left$(.str$) = "-"
      .sign = -1
      .str$ = right$(.str$, length(.str$) - 1)
    else
      .sign = 1
    endif

    # Process integer part
    .int = 0
    .rational = index(.str$, ".")
    .int$ = if .rational then left$(.str$, .rational-1) else .str$ fi
    .len = length(.int$)
    for .j from 0 to .len-1
      .i = .len - .j
      .c$ = mid$(.int$, .i, 1)
      .value = index(.digits$, .c$) - 1
      .int += .value * (.base ^ .j)
    endfor

    .frac = 0
    if .rational
      # Process rational part
      .radix = .rational
      .len = length(.str$)
      .frac$ = right$(.str$, .len - .radix)
      .len = length(.frac$)
      for .i to .len
        .c$ = mid$(.frac$, .i, 1)
        .value = index(.digits$, .c$) - 1
        .frac += .value * (1 / (.base ^ .i))
      endfor
    endif
    .n = .sign * (.int + .frac)
  endif
endproc

#! ~~~ params
#! in:
#!   .num: A number to convert
#!   .base: The base of the system to use for conversion
#! out:
#!   .n$: The decimal representation of that number
#! seealso:
#!   - utils@n2dec
#! ~~~
#!
#! ~~~ praat synopsis
#! @dec2n: 12, 12
#! assert dec2n.n$ == "10"
#! ~~~
#!
#! Parse a number and return a string representation of it in base-n. The
#! result is stored in `.n$`.
#!
procedure dec2n: .num, .base
  .digits$ = left$("0123456789abcdefghijklmnopqrstuvwxyz", .base)
  .n$ = ""

  .n = abs(.num)
  repeat
    .integer = .n div .base
    .remainder = .n mod .base
    .n$ = mid$(.digits$, floor(.remainder) + 1, 1) + .n$
    .n = .integer
  until !.integer

  .rational = abs(.num) mod 1
  if .rational
    .n$ = .n$ + "."
    repeat
      .rational *= .base
      .integer = .rational div 1
      .n$ = .n$ + mid$(.digits$, .integer + 1, 1)
      .rational -= .integer
    until !.rational
  endif

  .n$ = if .num < 0 then "-" + .n$ else .n$ fi
endproc

#! ~~~ params
#! in:
#!   .str$: A hexadecimal string representation of a number
#! out:
#!   .n: The decimal representation of that number
#! deprecated: hex2dec
#! seealso:
#!   - utils@n2dec
#! ~~~
#!
#! ~~~ praat synopsis
#! @parseHex: "10"
#! assert parseHex.n == 16
#! ~~~
#!
#! Deprecated. Use instead `@hex2dec`.
#!
procedure parseHex: .str$
  appendInfoLine: "# W: ""parseHex"" is deprecated. Use instead ""hex2dec""."
  @n2dec(.str$, 16)
  .n = n2dec.n
endproc
